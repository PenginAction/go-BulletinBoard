// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/post_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	dto "github.com/PenginAction/go-BulletinBoard/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIPostUsecase is a mock of IPostUsecase interface.
type MockIPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIPostUsecaseMockRecorder
}

// MockIPostUsecaseMockRecorder is the mock recorder for MockIPostUsecase.
type MockIPostUsecaseMockRecorder struct {
	mock *MockIPostUsecase
}

// NewMockIPostUsecase creates a new mock instance.
func NewMockIPostUsecase(ctrl *gomock.Controller) *MockIPostUsecase {
	mock := &MockIPostUsecase{ctrl: ctrl}
	mock.recorder = &MockIPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostUsecase) EXPECT() *MockIPostUsecaseMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockIPostUsecase) CreatePost(c context.Context, req dto.CreatePostRequest) (dto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", c, req)
	ret0, _ := ret[0].(dto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockIPostUsecaseMockRecorder) CreatePost(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockIPostUsecase)(nil).CreatePost), c, req)
}

// DeletePost mocks base method.
func (m *MockIPostUsecase) DeletePost(c context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockIPostUsecaseMockRecorder) DeletePost(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockIPostUsecase)(nil).DeletePost), c, id)
}

// GetAllPosts mocks base method.
func (m *MockIPostUsecase) GetAllPosts(c context.Context, req dto.AllPostsRequest) ([]dto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", c, req)
	ret0, _ := ret[0].([]dto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockIPostUsecaseMockRecorder) GetAllPosts(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockIPostUsecase)(nil).GetAllPosts), c, req)
}

// GetPostById mocks base method.
func (m *MockIPostUsecase) GetPostById(c context.Context, id uint) (dto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", c, id)
	ret0, _ := ret[0].(dto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockIPostUsecaseMockRecorder) GetPostById(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockIPostUsecase)(nil).GetPostById), c, id)
}

// UpdatePost mocks base method.
func (m *MockIPostUsecase) UpdatePost(c context.Context, req dto.UpdatePostRequest) (dto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", c, req)
	ret0, _ := ret[0].(dto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockIPostUsecaseMockRecorder) UpdatePost(c, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockIPostUsecase)(nil).UpdatePost), c, req)
}
