// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: image.sql

package db

import (
	"context"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (
 post_id,
 image_path
) VALUES (
 $1, $2
) RETURNING id, post_id, image_path, created_at, updated_at
`

type CreateImageParams struct {
	PostID    int64  `json:"post_id"`
	ImagePath string `json:"image_path"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.PostID, arg.ImagePath)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.ImagePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, post_id, image_path, created_at, updated_at FROM images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.ImagePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT id, post_id, image_path, created_at, updated_at FROM images
WHERE post_id = $1
ORDER BY post_id
LIMIT $2
OFFSET $3
`

type ListImagesParams struct {
	PostID int64 `json:"post_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListImages(ctx context.Context, arg ListImagesParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImages, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.ImagePath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
  set post_id = $2,
  image_path = $3
WHERE id = $1
RETURNING id, post_id, image_path, created_at, updated_at
`

type UpdateImageParams struct {
	ID        int64  `json:"id"`
	PostID    int64  `json:"post_id"`
	ImagePath string `json:"image_path"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, updateImage, arg.ID, arg.PostID, arg.ImagePath)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.ImagePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
